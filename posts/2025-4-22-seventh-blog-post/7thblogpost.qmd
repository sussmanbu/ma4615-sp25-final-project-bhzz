---
title: "Seventh blog post"
subtitle: ""
description:  |
  This blog post presents two interactive Shiny dashboards analyzing racial and gender disparities in Chicago crime victim data. Users can compare victim demographics with census data and explore patterns by crime type, sex, and race.
author: "BHZZ"
date: "2025-04-22"
image: image1-blog7.png
image-alt: ""
categories: []
date-modified: "2025-04-22"
draft: FALSE
---

# Run in console
install.packages("tidycensus")

Dashboard#1: Race Representation in Chicago: Crime Victims vs Population by year 2021, 2022, and 2023
```{r}
library(tidycensus)

# importing census data for 2021, 202, and 2022
census_api_key("c4df8a0f6334859b29db81b64e1ac48b98038f19", overwrite = TRUE)

# 2021
data2021 <- get_acs(
  geography = "place",
  variables = c(
    total = "B03002_001",
    white = "B03002_003",
    black = "B03002_004",
    native = "B03002_005",
    asian = "B03002_006",
    hispanic = "B03002_012"
  ),
  state = "IL",
  year = 2021,
  survey = "acs1"
)

saveRDS(data2021, "dataset/chicago_census_2021.rds")

# 2022
data2022 <- get_acs(
  geography = "place",
  variables = c(
    total = "B03002_001",
    white = "B03002_003",
    black = "B03002_004",
    native = "B03002_005",
    asian = "B03002_006",
    hispanic = "B03002_012"
  ),
  state = "IL",
  year = 2022,
  survey = "acs1"
)

saveRDS(data2022, "dataset/chicago_census_2022.rds")

# 2023
data2023 <- get_acs(
  geography = "place",
  variables = c(
    total = "B03002_001",
    white = "B03002_003",
    black = "B03002_004",
    native = "B03002_005",
    asian = "B03002_006",
    hispanic = "B03002_012"
  ),
  state = "IL",
  year = 2023,
  survey = "acs1"
)

saveRDS(data2023, "dataset/chicago_census_2023.rds")


```

```{r}
library(shiny)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)

```

```{r shiny-UI1}
# ==== UI ====
ui <- fluidPage(
  titlePanel("Race Representation in Chicago: Crime Victims vs Population"),
  sidebarLayout(
    sidebarPanel(
      selectInput("year", "Select Year:", choices = c(2021, 2022, 2023), selected = 2021)
    ),
    mainPanel(
      plotOutput("race_plot"),
      br(),
      textOutput("note")
    )
  )
)


```
=======
**Progress**
We've explored the dataset and started cleaning it in R while identifying variables like arrest date, borough, offense description, and demographic details that will be central to the interactive. Our next step is to build the Shiny app that includes both a time trend chart and dropdown filters for user exploration.

**Interactive**
We're creating the interactive dashboard called Arrest Trends Explorer, which will let users explore NYPD arrest data from different angles. 
- The goal is to make the data accessible and engaging by allowing users to view big picture trends like total arrests over time. 
- Users will also be able to "zoom in" on more specific patterns. 
- Users will be able to filter the data by borough, offense type, and demographic categories such as age or race. 
- This gives them the power to investigate questions that are personally meaningful or socially relevant, such as whether certain neighborhoods experience more arrests for specific types of crimes, or how trends shift over the course of a year.




```{r shiny-Server1}
# ==== Server ====
server <- function(input, output) {
  # Load violence data once
  violence_data <- read_csv("dataset/Violence_clean_missing.csv", show_col_types = FALSE)

  output$race_plot <- renderPlot({
    # ==== 1. Load census data ====
    census_raw <- readRDS(paste0("dataset/chicago_census_", input$year, ".rds"))

    census_df <- census_raw |>
      filter(NAME == "Chicago city, Illinois") |>
      select(variable, estimate) |>
      pivot_wider(names_from = variable, values_from = estimate) |>
      mutate(
        WHI = white / total * 100,
        BLK = black / total * 100,
        HIS = hispanic / total * 100,
        API = asian / total * 100,
        I   = native / total * 100
      ) |>
      select(WHI, BLK, HIS, API, I) |>
      pivot_longer(cols = everything(), names_to = "RACE", values_to = "Proportion") |>
      mutate(Source = "Census")

    # ==== 2. Create crime victim data ====
    victim_df <- violence_data |>
      filter(Year == input$year) |>
      filter(!(RACE %in% c("UNKNOWN", "S"))) |>
      mutate(RACE = ifelse(RACE %in% c("WBH", "WWH"), "HIS", RACE)) |>
      group_by(RACE) |>
      summarise(Count = n(), .groups = "drop") |>
      mutate(Proportion = Count / sum(Count) * 100,
             Source = "Crime Victims") |>
      select(RACE, Proportion, Source)
    
    
    # ==== 3. Combine and plot ====
    combined <- bind_rows(census_df, victim_df)

    ggplot(combined, aes(x = RACE, y = Proportion, fill = Source)) +
      geom_col(position = "dodge") +
      labs(title = paste("Race Representation in Chicago (", input$year, ")", sep = ""),
           x = "Race", y = "Proportion (%)") +
      theme_minimal()
  })

  # Add a note
  output$note <- renderText({
    paste0("Note: Population data for ", input$year,
           " comes from the U.S. Census ACS 1-Year Estimates. ",
           "Crime data reflects victim demographics recorded by CPD in the same year.")
  })
}

```

```{r shiny-run1}
# ==== Run App ====
shinyApp(ui = ui, server = server)

```
![](image1-blog7.png)

Dashboard#2: 

```{r shiny-UI2}
violence_data <- read_csv("dataset/Violence_clean_missing.csv", show_col_types = FALSE)


# ========== UI ==========
ui2 <- fluidPage(
  titlePanel("Victim Demographics by Crime Type"),
  sidebarLayout(
    sidebarPanel(
      selectInput("crime_type", "Select Crime Type:",
                  choices = unique(violence_data$PRIMARY_TYPE),
                  selected = "BATTERY"),
      checkboxGroupInput("sex", "Select Gender:",
                         choices = unique(violence_data$SEX),
                         selected = c("M", "F")),
      checkboxGroupInput("race", "Select Race:",
                         choices = unique(violence_data$RACE),
                         selected = c("BLK", "WHI", "HIS", "API"))
    ),
    mainPanel(
      plotOutput("distPlot")
    )
  )
)

```

```{r shiny-server2}

# ========== SERVER ==========
server2 <- function(input, output) {
  output$distPlot <- renderPlot({
    filtered <- violence_data |>
      filter(PRIMARY_TYPE == input$crime_type,
             SEX %in% input$sex,
             RACE %in% input$race)

    ggplot(filtered, aes(x = SEX, fill = RACE)) +
      geom_bar(position = "stack") +
      labs(
        title = paste("Victim Gender-Race Distribution for", input$crime_type),
        x = "Gender", y = "Number of Victims", fill = "Race"
      ) +
      theme_minimal()
  })
}

```


```{r shiny-run2}
# ==== Run App ====
shinyApp(ui2, server2)

```
![](image2-blog7.png)